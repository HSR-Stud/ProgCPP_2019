\BOOKMARK [1][-]{section.1}{Ein- und Ausgabe}{}% 1
\BOOKMARK [2][-]{subsection.1.1}{Streamkonzept}{section.1}% 2
\BOOKMARK [2][-]{subsection.1.2}{Eingabebeispiele}{section.1}% 3
\BOOKMARK [2][-]{subsection.1.3}{Ausgabebeispiele}{section.1}% 4
\BOOKMARK [2][-]{subsection.1.4}{Formatierte Ein- und Ausgabe: Manipulatoren ohne Parameter}{section.1}% 5
\BOOKMARK [2][-]{subsection.1.5}{Formatierte Ein- und Ausgabe: Manipulatoren mit Parameter}{section.1}% 6
\BOOKMARK [2][-]{subsection.1.6}{Streams und Dateien}{section.1}% 7
\BOOKMARK [1][-]{section.2}{Ausdr\374cke und Operatoren}{}% 8
\BOOKMARK [2][-]{subsection.2.1}{Auswertungsreihenfolge}{section.2}% 9
\BOOKMARK [1][-]{section.3}{Funktionen}{}% 10
\BOOKMARK [2][-]{subsection.3.1}{\334berladene Funktionen}{section.3}% 11
\BOOKMARK [2][-]{subsection.3.2}{Vorbelegte Parameter}{section.3}% 12
\BOOKMARK [2][-]{subsection.3.3}{inline-Funktionen vs. C-Makros}{section.3}% 13
\BOOKMARK [1][-]{section.4}{H\366here und strukturierte Datentypen}{}% 14
\BOOKMARK [2][-]{subsection.4.1}{Pointer}{section.4}% 15
\BOOKMARK [2][-]{subsection.4.2}{Referenzen}{section.4}% 16
\BOOKMARK [2][-]{subsection.4.3}{Pointer und Referenzen als R\374ckgabewert und Parameter\374bergabe}{section.4}% 17
\BOOKMARK [2][-]{subsection.4.4}{Dynamische Speicherverwaltung}{section.4}% 18
\BOOKMARK [2][-]{subsection.4.5}{Structs}{section.4}% 19
\BOOKMARK [1][-]{section.5}{G\374ltigkeitsbereiche, Namensr\344ume und Sichtbarkeit}{}% 20
\BOOKMARK [2][-]{subsection.5.1}{Namensr\344ume}{section.5}% 21
\BOOKMARK [2][-]{subsection.5.2}{Deklarationen}{section.5}% 22
\BOOKMARK [2][-]{subsection.5.3}{Type-cast}{section.5}% 23
\BOOKMARK [1][-]{section.6}{Module und Datenkapseln}{}% 24
\BOOKMARK [2][-]{subsection.6.1}{Motivation}{section.6}% 25
\BOOKMARK [2][-]{subsection.6.2}{Ziele der Modularisierung}{section.6}% 26
\BOOKMARK [2][-]{subsection.6.3}{Vom Modul zur Datenkapsel}{section.6}% 27
\BOOKMARK [2][-]{subsection.6.4}{Unitkonzept / Module und Datenkapseln in C++}{section.6}% 28
\BOOKMARK [2][-]{subsection.6.5}{Die Schnittstellendatei}{section.6}% 29
\BOOKMARK [2][-]{subsection.6.6}{Die Implementierungsdatei}{section.6}% 30
\BOOKMARK [2][-]{subsection.6.7}{Buildprozess / Makefile}{section.6}% 31
\BOOKMARK [1][-]{section.7}{Klassenkonzept}{}% 32
\BOOKMARK [2][-]{subsection.7.1}{Begriff der Klasse}{section.7}% 33
\BOOKMARK [2][-]{subsection.7.2}{UML ist...}{section.7}% 34
\BOOKMARK [2][-]{subsection.7.3}{UML-Notation einer Klasse}{section.7}% 35
\BOOKMARK [2][-]{subsection.7.4}{\334blicher Aufbau einer Klassensyntax}{section.7}% 36
\BOOKMARK [2][-]{subsection.7.5}{Elementfunktionen}{section.7}% 37
\BOOKMARK [2][-]{subsection.7.6}{static - Klassenelemente}{section.7}% 38
\BOOKMARK [2][-]{subsection.7.7}{this - Pointer}{section.7}% 39
\BOOKMARK [2][-]{subsection.7.8}{Konstruktor \(am Beispiel der Klasse TString\)}{section.7}% 40
\BOOKMARK [2][-]{subsection.7.9}{Destruktor}{section.7}% 41
\BOOKMARK [2][-]{subsection.7.10}{Member In-Class Initialization}{section.7}% 42
\BOOKMARK [2][-]{subsection.7.11}{kanonische Form von Klassen}{section.7}% 43
\BOOKMARK [2][-]{subsection.7.12}{Unions}{section.7}% 44
\BOOKMARK [2][-]{subsection.7.13}{Bitfelder}{section.7}% 45
\BOOKMARK [2][-]{subsection.7.14}{\334berladen von Operatoren}{section.7}% 46
\BOOKMARK [1][-]{section.8}{Templates}{}% 47
\BOOKMARK [2][-]{subsection.8.1}{Motivation}{section.8}% 48
\BOOKMARK [2][-]{subsection.8.2}{Funktions-Templates}{section.8}% 49
\BOOKMARK [2][-]{subsection.8.3}{Klassen-Templates}{section.8}% 50
\BOOKMARK [2][-]{subsection.8.4}{Klassen-Templates und getrennte \334bersetzung}{section.8}% 51
\BOOKMARK [1][-]{section.9}{Vererbung \(Inheritance\)}{}% 52
\BOOKMARK [2][-]{subsection.9.1}{Einsatz der Vererbung}{section.9}% 53
\BOOKMARK [2][-]{subsection.9.2}{Ableiten einer Klasse}{section.9}% 54
\BOOKMARK [2][-]{subsection.9.3}{Zugriff auf Elemente der Basisklasse}{section.9}% 55
\BOOKMARK [2][-]{subsection.9.4}{Slicing Problem}{section.9}% 56
\BOOKMARK [2][-]{subsection.9.5}{Vererbung und G\374ltigkeitsbereiche}{section.9}% 57
\BOOKMARK [2][-]{subsection.9.6}{Elementfunktionen bei abgeleiteten Klassen}{section.9}% 58
\BOOKMARK [1][-]{section.10}{Polymorphismus / Mehrfachvererbung / RTTI}{}% 59
\BOOKMARK [2][-]{subsection.10.1}{Polymorphismus}{section.10}% 60
\BOOKMARK [2][-]{subsection.10.2}{Abstrakte Klassen}{section.10}% 61
\BOOKMARK [2][-]{subsection.10.3}{Mehrfachvererbung}{section.10}% 62
\BOOKMARK [2][-]{subsection.10.4}{RTTI \(Laufzeit-Typinformation\)}{section.10}% 63
\BOOKMARK [1][-]{section.11}{Assertions}{}% 64
\BOOKMARK [2][-]{subsection.11.1}{static\137assert}{section.11}% 65
\BOOKMARK [1][-]{section.12}{Exception Handling}{}% 66
\BOOKMARK [2][-]{subsection.12.1}{Handling Strategie von System Exceptions}{section.12}% 67
\BOOKMARK [2][-]{subsection.12.2}{Ziel}{section.12}% 68
\BOOKMARK [2][-]{subsection.12.3}{Exceptionhandling in C++}{section.12}% 69
\BOOKMARK [1][-]{section.13}{Beispiele}{}% 70
\BOOKMARK [2][-]{subsection.13.1}{Stack als Klasse}{section.13}% 71
\BOOKMARK [2][-]{subsection.13.2}{Stack als Template}{section.13}% 72
\BOOKMARK [2][-]{subsection.13.3}{Vererbung Comiccharacter}{section.13}% 73
\BOOKMARK [2][-]{subsection.13.4}{Mehrfachvererbung Comiccharacter}{section.13}% 74
\BOOKMARK [2][-]{subsection.13.5}{RTTI}{section.13}% 75
